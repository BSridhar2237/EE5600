# Subject EE5600
# Assignment 01
# Problem  "in lines and planes - 103"
# Roll number EE20RESCH14006
# Name B.Sridhar

import math

p1 = [1,1,'p'] # point represented in single row array
p2 = [-3,0,1] # point represented in single row array
plane = [3,4,-12,13] # plane equation ax+by+cz+d=0 represented in (a,b,c,d) single row array

def distance_point_from_plane(p,pl):
    numerator = abs ( pl[0]*p[0] + pl[1]*p[1] + pl[2]*p[2] + pl[3] )
    denominator = math.sqrt ( pl[0]**2 + pl[1]**2 + pl[2]**2 )
    distance = numerator / denominator
    return distance
  
# distance of point (x1,y1,z1) from plane ax+by+cz+d=0 is given by
# d = abs ( ax1 + by1 + cz1 +d ) / ( sqrt(a**2 + b**2 + c**2))
# Given point p1 and p2 are equidistant from plane d1 and d2 are equal
# then unknown z-coordinate of p1 = [ abs ( ax2+by2+cz2+d ) ] - [ abs ( ax1+by1+d ) ] / c

NumeratorOfdistanceofP2fromplane = abs ( ( plane[0]*p2[0] + plane[1]*p2[1] + plane[2]*p2[2] + plane[3] ) )
p1[2] = int ( ( NumeratorOfdistanceofP2fromplane - ( plane[0]*p1[0] + plane[1]*p1[1] + plane[3] )) / plane[2] )

p1distancefromplane = distance_point_from_plane(p1,plane)
p2distancefromplane = distance_point_from_plane(p2,plane)

print ("Thus point p1 =", p1)
print ("distance of p1 from plane =", round(p1distancefromplane,4), "distance of p2 from plane =", round(p2distancefromplane,4), )
